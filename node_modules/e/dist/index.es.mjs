const n=["string","bigint","number","boolean"];function t(n){return Object.entries(n)}function r(n){return Object.values(n)}function e(n){return Object.keys(n)}function o(n){return null!=n}function u(n){return new Promise(t=>setTimeout(t,n))}function c(){}const i=(n,t)=>{let r=null;return(...e)=>{null!==r&&(clearTimeout(r),r=null),r=setTimeout(()=>n(...e),t)}};function f(n){return!("object"!=typeof n||!n)&&n.constructor===Object}function s(t){return n.includes(typeof t)}function a(n){if(null===n||s(n))return n;if(Array.isArray(n)){const t=[];for(const r of n)t.push(a(r));return t}if(f(n)){const t={};for(const[r,e]of Object.entries(n))t[r]=a(e);return t}if(n instanceof Map){const t=new n.constructor;for(const[r,e]of n.entries())t.set(r,a(e));return t}if(n instanceof Set){const t=new n.constructor;for(const r of n.values())t.add(a(r));return t}return n}function l(n,t){return 100*n/t}function h(n,t){return n*t/100}function b(n,t){return t<=0?n:n-n*(t/100)}function m(n,t){return t<=0?n:n+n*(t/100)}function p(n){return n[Math.floor(Math.random()*n.length)]}function M(n,t){if(t<1)throw new RangeError("chunkSize must be 1 or greater.");if(!Number.isInteger(t))throw new TypeError("chunkSize must be an integer.");const r=n.slice(),e=[];for(;r.length;)e.push(r.splice(0,t));return e}function d(n){return[...new Set(n)]}function g(n){return n.reduce((n,t)=>n+t,0)}function w(n){let t=[...n];for(let n=t.length-1;n>0;n--){const r=Math.floor(Math.random()*(n+1));[t[n],t[r]]=[t[r],t[n]]}return t}function j(n,t){const r=[],e=[];for(const o of n)(t(o)?r:e).push(o);return[r,e]}function y(n,t){return Math.floor(Math.random()*(t-n+1)+n)}function O(n,t){return Math.random()*(t-n)+n}function S(n){return 1===y(1,n)}function T(n){return O(0,100)<n}function k(n,t=1){const r=Math.pow(10,t||0);return Math.round(n*r)/r}export{h as calcPercentOfNum,l as calcWhatPercent,M as chunk,i as debounce,a as deepClone,m as increaseNumByPercent,f as isObject,s as isPrimitive,c as noOp,o as notEmpty,t as objectEntries,e as objectKeys,r as objectValues,j as partition,T as percentChance,n as primitiveTypes,p as randArrItem,O as randFloat,y as randInt,b as reduceNumByPercent,S as roll,k as round,w as shuffleArr,u as sleep,g as sumArr,d as uniqueArr};
//# sourceMappingURL=index.es.mjs.map
